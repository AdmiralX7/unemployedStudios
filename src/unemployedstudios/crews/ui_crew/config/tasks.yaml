ui_framework_task:
  description: >
    Review the core_systems_design.md, component_interfaces.md, and style_guide.md documents, and design the core UI framework for
    the HTML5 game. Your implementation should include:
    
    1. A flexible UI component architecture
    2. Core rendering system for UI elements
    3. Event handling and input management for UI
    4. Layout management system
    5. UI state management
    
    Your code should be well-commented, follow JavaScript best practices, and align with the interfaces defined
    in the technical design documents. The UI system should adhere to the visual guidelines in the style guide.
    
    The resulting code should be saved in 'game_ui.js' as specified in the flow architecture document.
  expected_output: >
    A complete, well-structured game_ui.js file implementing the UI framework with all essential components.
    The output should include documentation of the UI system architecture and any design decisions made.
  agent: ui_framework_developer

user_experience_task:
  description: >
    Based on the style_guide.md and the UI framework implementation, create components and screens for the game's 
    user interface. Your implementation should include:
    
    1. Main menu screen and navigation
    2. HUD elements (score, health, collectibles, etc.)
    3. Pause menu and settings screens
    4. Dialog and notification systems
    5. Game over and level completion screens
    
    Ensure your UI components are intuitive, visually consistent with the style guide, and provide clear feedback
    to player actions. Add your code to the game_ui.js file.
  expected_output: >
    UI components and screens added to game_ui.js that implement all necessary game interfaces
    in an intuitive, engaging manner that follows the game's visual style.
  agent: user_experience_designer

responsive_design_task:
  description: >
    Create responsive layout systems for the UI framework that adapt to different screen sizes and device capabilities.
    Your implementation should:
    
    1. Implement a scaling system for UI elements
    2. Create dynamic layout containers for different aspect ratios
    3. Design touch-friendly interfaces with appropriate hit areas
    4. Implement resizing and repositioning logic for UI elements
    5. Create fallbacks for different device capabilities
    
    Ensure the UI remains functional and visually appealing across different devices and screen orientations.
    Add your implementation to the game_ui.js file.
  expected_output: >
    Responsive design system added to game_ui.js that ensures the UI adapts appropriately to different
    screen sizes, aspect ratios, and input methods.
  agent: responsive_design_expert

animation_task:
  description: >
    Implement animations and transitions for UI elements based on the style guide and UI framework.
    Your implementation should:
    
    1. Create a flexible animation system for UI elements
    2. Implement transitions between UI states and screens
    3. Add feedback animations for buttons and interactive elements
    4. Create loading and progress animations
    5. Ensure animations are performant and don't impact gameplay
    
    The animations should enhance usability while maintaining the visual style defined in the style guide.
    Add your implementation to the game_ui.js file.
  expected_output: >
    Animation system and specific UI animations added to game_ui.js, creating a polished, 
    responsive feel for all UI interactions.
  agent: animation_specialist

final_integration_task:
  description: >
    Review all components of the UI system (framework, screens, responsiveness, animations) and ensure they work
    together coherently. Your task includes:
    
    1. Validating that all components interact properly according to the component interfaces
    2. Ensuring consistent styling across all UI elements
    3. Testing integration with game systems (input, rendering, game state)
    4. Documenting the complete UI system architecture
    5. Providing usage examples for each major UI component
    
    Finalize the game_ui.js file to ensure it's complete, well-structured, and ready for integration with
    the game engine and other game systems.
  expected_output: >
    A finalized game_ui.js file that integrates all UI components into a cohesive system. Include API documentation
    explaining how to use the UI system, create new UI elements, and integrate with the game flow.
  agent: ui_framework_developer
