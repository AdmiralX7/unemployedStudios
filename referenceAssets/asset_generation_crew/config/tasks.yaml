analyze_asset_requirements:
  description: >
    You (as the Asset Manager) need to analyze the game concept document and file structure
    to identify all asset requirements for the game. Consider:

    - Character designs based on: {main_character}, {supporting_characters}
    - Environment elements from: {world_building}
    - Level-specific assets for: {levels}
    - UI elements that match: {visual_style}
    - Audio elements that align with: {audio_style}

    Create a comprehensive list of all assets needed, organized by type and priority.
  expected_output: >
    A detailed asset requirements document that lists all graphical, audio, and UI assets 
    needed for the game. Each asset should have a description, purpose, and technical 
    specifications (size, format, etc.).
  agent: asset_manager

design_character_assets:
  description: >
    You (as the Graphic Designer) are responsible for creating detailed descriptions
    of all character assets needed for the game, including:

    - Main character sprites (idle, walking, jumping, attacking, etc.)
    - Supporting character designs
    - Enemy character designs
    - NPC designs

    For each character, provide a detailed visual description that another artist could use
    to create the actual graphics. Include dimensions, color palettes, animation frames needed,
    and special effects.
  expected_output: >
    Detailed textual descriptions of all character assets, their states/animations,
    color schemes, and any special visual effects. This should also include specifications
    for sprite sheets, dimensions, and file formats.
  agent: graphic_designer

design_environment_assets:
  description: >
    You (as the Graphic Designer) need to create detailed descriptions of all environmental 
    assets needed for the game, including:

    - Background elements for each level
    - Terrain features (platforms, obstacles, etc.)
    - Interactive elements (doors, switches, collectibles)
    - Decorative elements that enhance the atmosphere

    For each environmental asset, provide a detailed visual description, dimensions,
    and how it fits into the game world.
  expected_output: >
    Comprehensive descriptions of all environmental graphics required, including
    background layers, terrain elements, interactive objects, and decorative features.
    Include specifications for dimensions, layering, and file formats.
  agent: graphic_designer

design_ui_elements:
  description: >
    You (as the UI Designer) need to create detailed descriptions of all UI elements 
    needed for the game, including:

    - Main menu screens
    - HUD elements (health bars, score displays, etc.)
    - Pause menu
    - Inventory screens (if applicable)
    - Dialog boxes
    - Tutorial elements

    For each UI element, provide a detailed visual description, positioning information,
    and how it integrates with gameplay.
  expected_output: >
    Detailed specifications for all UI elements, including visual descriptions,
    layouts, animations, and how they interact with game states. Include mockups
    as text descriptions that could be implemented in HTML/CSS/JS.
  agent: ui_designer

create_sound_effects:
  description: >
    You (as the Sound Designer) need to create detailed descriptions of all sound effects
    needed for the game, including:

    - Character action sounds (jumping, attacking, etc.)
    - Environmental sounds
    - UI feedback sounds
    - Enemy sounds
    - Special ability sounds

    For each sound effect, provide a detailed description of its characteristics,
    when it should play, and how it enhances gameplay.
  expected_output: >
    Comprehensive list of all required sound effects with detailed descriptions
    of their acoustic characteristics, timing, and purpose in the game. Include
    recommendations for implementation methods in JavaScript.
  agent: sound_designer

create_background_music:
  description: >
    You (as the Sound Designer) need to create detailed descriptions of all background
    music tracks needed for the game, including:

    - Main theme
    - Level-specific tracks
    - Boss battle music
    - Menu music
    - Victory/defeat jingles

    For each music track, describe its mood, instrumentation, tempo, and how it relates
    to the game's emotional arc.
  expected_output: >
    Detailed descriptions of all music tracks needed, including mood, instrumentation,
    tempo, structure, and implementation recommendations. Include suggestions for
    transitions between tracks and adaptive audio techniques.
  agent: sound_designer

finalize_assets:
  description: >
    You (as the Asset Manager) need to compile all the asset descriptions and create
    a final asset implementation plan. This should include:

    - A comprehensive asset list with all graphics, audio, and UI elements
    - File naming conventions
    - Directory structure for assets
    - Implementation guidelines for developers
    - Prioritization of assets for development

    Ensure all assets work together cohesively and align with the game's visual and audio style.
  expected_output: >
    A complete asset implementation plan that includes all asset specifications,
    file structure, naming conventions, and technical requirements. This should be
    ready for developers to use in creating the actual game assets.
  agent: asset_manager

specify_visual_assets:
  description: >
    You (as the Image Concept Designer) need to create detailed specifications for all visual assets
    in the game using the ImageAssetSpec Pydantic model. For each asset:
    
    1. Assign a unique asset_id (e.g., "main_character_idle", "forest_background")
    2. Categorize by asset_type (character, environment, ui, logo, etc.)
    3. Define a specific filename with path (e.g., "./assets/images/main_character.png")
    4. Craft a highly detailed DALL-E prompt that will produce the exact image needed
    5. Specify the visual style that matches the game's overall aesthetic
    6. Assign an importance level (1-5, where 1 is highest priority)
    7. Write a description explaining the asset's purpose in the game
    
    DO NOT actually generate the images - only create structured specifications for them.
    Your output must be valid JSON that can be parsed into ImageAssetSpec objects.
  expected_output: >
    A JSON structure containing an array of ImageAssetSpec objects conforming to the Pydantic model.
    This should include at least 5-10 different visual assets covering characters, environments, 
    UI elements, and other game visuals.
  agent: graphic_designer

specify_audio_assets:
  description: >
    You (as the Audio Concept Designer) need to create detailed specifications for all audio assets
    in the game using the AudioAssetSpec Pydantic model. For each audio asset:
    
    1. Assign a unique asset_id (e.g., "jump_sound", "background_music")
    2. Categorize by asset_type (effect, music, ambient, ui)
    3. Define a specific filename with path (e.g., "./assets/audio/jump.mp3")
    4. Create precise search terms that will find appropriate sounds on Freesound
    5. Write a description of the sound and its purpose in the game
    6. Assign an importance level (1-5, where 1 is highest priority)
    7. Optionally specify a desired duration for the audio clip
    
    DO NOT actually source the audio - only create structured specifications for them.
    Your output must be valid JSON that can be parsed into AudioAssetSpec objects.
  expected_output: >
    A JSON structure containing an array of AudioAssetSpec objects conforming to the Pydantic model.
    This should include at least 5-10 different audio assets covering sound effects, background music,
    UI sounds, and ambient audio.
  agent: sound_designer

compile_asset_specifications:
  description: >
    You (as the Asset Manager) need to compile all the asset specifications into a single
    AssetSpecCollection Pydantic model. This should include:
    
    1. All ImageAssetSpec objects from the visual asset specification task
    2. All AudioAssetSpec objects from the audio asset specification task
    
    Ensure there are no duplicates, and that the specifications are complete and valid.
    This collection will be passed to the main program for actual asset generation.
    
    Your output MUST be valid JSON that can be parsed into an AssetSpecCollection object.
  expected_output: >
    A JSON structure representing a complete AssetSpecCollection with both image_assets and
    audio_assets arrays, conforming to the Pydantic model specification in types.py.
  agent: asset_manager
