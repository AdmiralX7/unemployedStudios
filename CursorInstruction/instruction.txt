---
description: Timeline Tracking and Management
globs: ["**/*.*"]
alwaysApply: true
---

# Timeline Tracking Guidelines

As your AI assistant, I will maintain a detailed project history through a timeline.txt file.

## Timeline Management

1. **Maintain a detailed timeline.txt** at the root of the project:
   - After each significant action, I will update timeline.txt with a timestamped entry
   - For complex actions, I'll break them down into multiple entries
   - I'll ensure each entry is descriptive enough for future context

2. **Timeline entry format**:
   ```
   [YYYY-MM-DD HH:MM:SS] - ACTION: Brief description of what was done
     DETAILS: More detailed explanation if needed
     FILES: List of files affected
     OUTCOME: Result of the action (if applicable)
   ```

3. **Create timeline.txt if it doesn't exist** before beginning work on the project.

4. **Review the timeline** at the start of each new conversation to understand project history.

## Timeline.txt Commands

```bash
# Command to insert a new timestamp entry in timeline.txt
echo -e "\n[$(date '+%Y-%m-%d %H:%M:%S')] - ACTION: Description of action\n  DETAILS: More details here\n  FILES: list of files affected\n  OUTCOME: Result of action" >> timeline.txt

# Command to create timeline.txt if it doesn't exist
if [ ! -f timeline.txt ]; then
  echo "[$(date '+%Y-%m-%d %H:%M:%S')] - ACTION: Project initialized\n  DETAILS: Starting new project work\n  OUTCOME: Timeline tracking established" > timeline.txt
fi
```

------------------------------------------------------

---
description: Code Organization Best Practices
globs: ["**/*.py", "**/*.js", "**/*.ts", "**/*.jsx", "**/*.tsx"]
alwaysApply: true
---

# Code Organization Best Practices

As your AI assistant, I will follow these guidelines for maintaining high-quality, organized code.

## General Code Organization

1. When creating or modifying files:
   - Maintain consistent code style throughout the project
   - Document functions, classes, and complex logic
   - Organize related functionality together
   - Use descriptive variable and function names

2. Structure code for readability:
   - Group related functions and classes
   - Use consistent indentation and formatting
   - Add clear section dividers for large files
   - Keep functions focused on single responsibilities

## Language-Specific Best Practices

### Python
- Follow PEP 8 style guidelines
- Use type hints for function parameters and return values
- Organize imports in standard order: standard library, third-party, local

### JavaScript/TypeScript
- Use consistent naming conventions (camelCase for variables/functions, PascalCase for classes)
- Leverage TypeScript types and interfaces
- Organize imports logically and maintain consistent import style

------------------------------------------------------

---
description: CrewAI Project Organization
globs: ["**/crews/**/*.*", "**/flows/**/*.*"]
alwaysApply: true
---

# CrewAI Project Organization

For CrewAI projects, I will follow these specific organizational practices.

## CrewAI Structure

1. Keep crews and their configurations in well-organized directories:
   - Each crew in its own directory
   - Configuration files (agents.yaml, tasks.yaml) in config subdirectory
   - Crew implementation in a dedicated Python file

2. For flows:
   - Ensure flow state objects have clear types and documentation
   - Use descriptive method names for flow steps
   - Maintain clear dependencies between steps using @listen decorators

3. Error handling:
   - Add proper error handling for LLM calls
   - Implement validation steps between critical operations
   - Include recovery mechanisms for common failure cases

## Code Quality

1. For agent definitions:
   - Create focused agents with clear roles, goals, and backstories
   - Keep task descriptions detailed and specific
   - Use consistent formatting for YAML files

2. For task implementations:
   - Ensure context dependencies are explicitly defined
   - Document expected inputs and outputs
   - Add descriptive docstrings

------------------------------------------------------

---
description: Documentation Requirements
globs: ["**/*.md", "**/*.py", "**/*.js", "**/*.ts"]
alwaysApply: true
---

# Documentation Guidelines

As your AI assistant, I will maintain thorough documentation throughout the project.

## Documentation Practices

1. For significant changes:
   - Update relevant documentation
   - Add comments explaining complex logic
   - Document any new dependencies or configuration requirements

2. When adding new features:
   - Create or update README files as appropriate
   - Document the feature's purpose, usage, and limitations
   - Include examples of usage where helpful

3. For public interfaces:
   - Document parameters, return values, and exceptions
   - Include usage examples
   - Note any performance considerations

## README Maintenance

1. Keep README.md up-to-date with:
   - Project overview and purpose
   - Installation instructions
   - Usage examples
   - Configuration options
   - Dependency information

------------------------------------------------------

---
description: Workflow Process Guidelines
globs: ["**/*.*"]
alwaysApply: true
---

# Workflow Process Guidelines

As your AI assistant, I will follow a structured workflow to ensure high-quality results.

## Implementation Process

1. Before implementing, I will:
   - Analyze the request and existing codebase
   - Propose a clear implementation plan
   - Break large tasks into manageable steps

2. During implementation:
   - Update the timeline with progress
   - Follow established code organization patterns
   - Maintain consistent style with existing code

3. After implementing, I will:
   - Summarize what was done
   - Suggest next steps or improvements
   - Update the timeline with accomplishments
   - Verify that documentation is complete

## Continuity Management

1. At the start of each conversation:
   - Review the timeline.txt for context
   - Understand the current state of the project
   - Consider any pending tasks or known issues

2. Before ending each conversation:
   - Ensure all changes are documented
   - Update the timeline with a summary
   - Note any unresolved issues for future reference 